{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EXAMPLES","label","src","params","JSON","stringify","x","y","entity","kind","raw","id","name","profile","login","emails","compose","withState","withHandlers","onSubmit","_ref2","setResponse","parse","console","log","axios","post","jsonrpc","method","Math","floor","random","then","res","response","data","e","error","setExample","_ref3","setSrc","setParams","example","_ref","react_default","a","createElement","className","lib_default","mode","theme","width","value","onChange","val","editorProps","$blockScrolling","target","map","ex","i","key","onClick","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53f2120a.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nimport { compose, withHandlers, withState } from \"recompose\";\n\nimport AceEditor from \"react-ace\";\n\nimport brace from \"brace\";\n\nimport \"brace/mode/groovy\";\nimport \"brace/mode/json\";\nimport \"brace/theme/monokai\";\nimport \"brace/theme/github\";\n\nconst EXAMPLES = [\n  {\n    label: \"Const Example\",\n    src: `19 + 4`,\n    params: \"{}\"\n  },\n  {\n    label: \"Add Example\",\n    src: `def add(a, b) {\n  a + b\n}\n\nadd(input.x, input.y)`,\n    params: JSON.stringify({ x: 5, y: 6 }, null, 2)\n  },\n  {\n    label: \"Transformer (USER) Example\",\n    src: `def transformUser(raw) {\n    def model = [:]\n\n    model['externalId'] = raw['id']\n    model['username'] = raw['profile']['login']\n    model['email'] = raw['profile']['emails'][0]\n    model['display'] = raw['name']\n    model['name'] = raw['name']\n\n    model\n}\n\ndef transformGroup(raw) {\n    def model = [:]\n\n    model['externalId'] = raw['id']\n    model['email'] = raw['email']\n    model['display'] = raw['name']\n\n    model\n}\n\ndef transform(entity) {\n    def result\n    switch (entity.kind) {\n        case 'USER':\n            result = transformUser(entity.raw)\n            break\n        case 'GROUP':\n            result = transformGroup(entity.raw)\n            break\n        default:\n            result = [:]\n    }\n    result\n}\n\ntransform(input.entity)`,\n    params: JSON.stringify(\n      {\n        entity: {\n          kind: \"USER\",\n          raw: {\n            id: \"asdf123\",\n            name: \"David Espo\",\n            profile: {\n              login: \"davide-bc\",\n              emails: [\"de@bc.com\", \"davide@bc.com\"]\n            }\n          }\n        }\n      },\n      null,\n      2\n    )\n  }\n];\n\nconst App = ({\n  onSubmit,\n  params,\n  response,\n  setExample,\n  setParams,\n  setSrc,\n  src\n}) => (\n  <div className=\"App container\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <h1>Script</h1>\n        <div>\n          <AceEditor\n            mode=\"groovy\"\n            theme=\"monokai\"\n            width=\"100%\"\n            value={src}\n            onChange={val => setSrc(val)}\n            editorProps={{ $blockScrolling: true }}\n          />\n        </div>\n        <select onChange={e => setExample(EXAMPLES[e.target.value])}>\n          {EXAMPLES.map((ex, i) => (\n            <option value={i} key={i}>\n              {ex.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"col\">\n        <h1>Params</h1>\n        <div>\n          <AceEditor\n            mode=\"json\"\n            theme=\"monokai\"\n            width=\"100%\"\n            value={params}\n            onChange={val => setParams(val)}\n            editorProps={{ $blockScrolling: true }}\n          />\n        </div>\n        <button onClick={() => onSubmit()}>Run</button>\n      </div>\n    </div>\n    <h1>Output</h1>\n    <div>\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        width=\"100%\"\n        value={response}\n        readOnly={true}\n        editorProps={{ $blockScrolling: true }}\n      />\n    </div>\n  </div>\n);\n\nexport default compose(\n  withState(\"src\", \"setSrc\", \"19 + 6\"),\n  withState(\"params\", \"setParams\", \"{}\"),\n  withState(\"response\", \"setResponse\", \"\"),\n  withHandlers({\n    onSubmit: ({ src, params, setResponse }) => () => {\n      try {\n        params = JSON.parse(params);\n        console.log({ src, params });\n        axios\n          .post(\"http://localhost:8080/rpc/v1/sync\", {\n            jsonrpc: \"2.0\",\n            method: \"scripting.groovy.eval\",\n            params: {\n              name: \"Testing\",\n              src,\n              params\n            },\n            id: Math.floor(Math.random() * 10000)\n          })\n          .then(res => {\n            const response = JSON.stringify(res.data, null, 2);\n            setResponse(response);\n            console.log({ response });\n          });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n    setExample: ({ setSrc, setParams }) => example => {\n      console.log({ example });\n      const { src, params } = example;\n      setSrc(src, () => setParams(params));\n    }\n  })\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}